<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title></title>
    <link>http://localhost:4000</link>
    <description>
      Javascript Developer.
    </description>
    
        
            <item>
                <title>Using ES6 modules in the browser</title>
                <link>http://localhost:4000/javascript/node/es6/2014/11/16/using-es6-modules-in-the-browser/</link>
                <content:encoded>
                    <![CDATA[
                    <p>There are a lot of information about Gulp, not so much for ES6 and just a very few articles about how to implement ES6 modules (for the browser) properly.</p>

<p>On my last project I was using Gulp + ES6 and I had to spent some time figuring out how to get ES6 modules working properly. This is how I finally did it without using Browserify or any AMD loader.</p>

<p>My first attempt was to use <a href="https://www.npmjs.com/package/gulp-es6-transpiler" target="_blank">gulp-es6-transpiler</a> (that basically is a wrapper for <a href="https://www.npmjs.com/package/es6-transpiler" target="_blank">es6-transpiler</a>) but it doesn’t support modules, then I took a look to <a href="https://www.npmjs.org/package/gulp-es6-module-jstransform">gulp-es6-module-jstransform</a> but it only transpile to CommonJS, meaning that we’ll need to use Browserify, then I tried <a href="https://github.com/google/traceur-compiler" target="_blank">Traceur</a> (from Google) and it has two options for browser modules, one is ‘AMD (meaning that we’ll need to use RequireJS or similar) and ‘inline’ that basically what it does is generate one file with all the transpiled modules on it (which is the closet option to “native” ES6 modules).
The thing is that the ‘inline’ option works perfect if you are using the command line, but if you use the Traceur’s node API (like <a href="https://www.npmjs.org/package/gulp-traceur" target="_blank">gulp-traceur</a>) it’ll throw an error.</p>

<p><strong>[UPDATE]</strong> <a href="https://github.com/google/traceur-compiler/issues/1282" target="_blank">I’ve put this issue on their Github</a> and finally got fixed, but then we realized that the transpile from the node API wasn’t generating the same output as the command line, so we finally decided to build a small Gulp plugin wrapper for the command line Traceur (Thanks Edward!)</p>

<p><a href="https://www.npmjs.com/package/gulp-traceur-cmdline" target="_blank">Here is the plugin</a> and this is how you can use it:</p>

<p><strong>Install</strong><br />
Make sure you have installed Traceur globally:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">npm install traceur --global</code></pre></figure>

<p>Install <code class="highlighter-rouge">gulp-traceur-cmdline</code> to your project:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">npm install gulp-traceur-cmdline --save-dev</code></pre></figure>

<p><strong>Usage</strong></p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">gulpTraceurCmdline</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'gulp-traceur-cmdline'</span><span class="p">);</span>

<span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">'gulpTraceurCmdline'</span><span class="p">,</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s2">"./source/styleguide/js/main.js"</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulpTraceurCmdline</span><span class="p">(</span><span class="s1">'/usr/local/bin/traceur'</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">modules</span> <span class="p">:</span> <span class="s1">'inline'</span><span class="p">,</span>
      <span class="na">out</span>     <span class="p">:</span> <span class="s1">'./dist/styleguide/js/main.js'</span><span class="p">,</span>
      <span class="na">debug</span>   <span class="p">:</span> <span class="kc">false</span>
    <span class="p">}))</span>
<span class="p">});</span></code></pre></figure>

<p>Github: <a href="https://github.com/juancabrera/gulp-traceur-cmdline" target="_blank">https://github.com/juancabrera/gulp-traceur-cmdline</a></p>

<p>NPM: <a href="https://github.com/juancabrera/gulp-traceur-cmdline" target="_blank">https://www.npmjs.org/package/gulp-traceur-cmdline</a></p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/javascript/node/es6/2014/11/16/using-es6-modules-in-the-browser/</guid>
                <description>
                    
                </description>
                <pubDate>Sun, 16 Nov 2014 00:00:00 -0500</pubDate>
                <author>Juan Cabrera</author>
            </item>
        
    
        
            <item>
                <title>My front-end codebase</title>
                <link>http://localhost:4000/javascript/node/es6/2014/11/16/my-front-end-codebase/</link>
                <content:encoded>
                    <![CDATA[
                    <p>After trying different front-end configurations in the past few months (Grunt or Gulp, HAML or Slim, ES6 modules or AMD modules, etc) I have finally found one that Im pretty comfortable with (at least for a while). This codebase is using:</p>

<ul>
  <li><a href="http://gulpjs.com/" target="_blank">Gulp</a></li>
  <li><a href="http://slim-lang.com/" target="_blank">Slim</a></li>
  <li><a href="http://sass-lang.com/" target="_blank">SASS</a></li>
  <li><a href="https://github.com/postcss/autoprefixer" target="_blank">Autoprefixer</a></li>
  <li><a href="https://github.com/google/traceur-compiler" target="_blank">Traceur</a>   for ES6 transpile. (wrapper for command line traceur)</li>
</ul>

<p><strong>Next steps</strong></p>

<p>Try and incorporate performance tools (like <a href="https://github.com/ben-eb/gulp-uncss" target="_blank">uncss</a>, <a href="https://github.com/addyosmani/critical-path-css-demo" target="_blank">critical-path</a>) and testing tools.</p>

<p>You can find the codebase on my Github (feel free to contribute if you like it): <a href="https://github.com/juancabrera/gulp-frontend-codebase.">https://github.com/juancabrera/gulp-frontend-codebase</a>.</p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/javascript/node/es6/2014/11/16/my-front-end-codebase/</guid>
                <description>
                    
                </description>
                <pubDate>Sun, 16 Nov 2014 00:00:00 -0500</pubDate>
                <author>Juan Cabrera</author>
            </item>
        
    
        
            <item>
                <title>Javascript 360</title>
                <link>http://localhost:4000/javascript/360/motion/2014/06/11/javascript-360/</link>
                <content:encoded>
                    <![CDATA[
                    <p>Almost a year ago I wrote a small Javascript method that takes a bunch of images (frames) and make with them a spinnable 360 with inertia that works for both desktop and mobile. I also tweaked it a little bit so it could work with a Leap Motion.</p>

<p>I want to retake this little project in order to make some improvements, mostly in performance, tweaking the inertia and probably adding native support for the Leap Motion. If you want to help, you are more than welcome :)</p>

<p>Demo: <a href="http://juancabrera.github.io/three60/" target="_blank">http://juancabrera.github.io/three60/
</a><br />
Demo with LeapMotion: <a href="http://instagram.com/p/fTSUreky5f/" target="_blank">http://instagram.com/p/fTSUreky5f/</a><br />
GitHub Repo: <a href="https://github.com/juancabrera/three60" target="_blank">https://github.com/juancabrera/three60</a></p>

<p><strong>[Updated]</strong> Nov 13, 2014.</p>
<ul>
  <li>Fixed bugs with interaction</li>
  <li>Added RequestAnimationFrame</li>
  <li>Improved inertia</li>
  <li>Removed jQuery dependency</li>
</ul>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/javascript/360/motion/2014/06/11/javascript-360/</guid>
                <description>
                    
                </description>
                <pubDate>Wed, 11 Jun 2014 00:00:00 -0400</pubDate>
                <author>Juan Cabrera</author>
            </item>
        
    
        
            <item>
                <title>The spring effect in JavaScript</title>
                <link>http://localhost:4000/javascript/motion/animation/2014/01/20/the-spring-effect-in-javascript/</link>
                <content:encoded>
                    <![CDATA[
                    <p>In the last weeks I was trying to figure out a way to make things scroll nicer and that doesnt affect negatively the performance. When I start I didnt know exactly what was the result I wanted, so after a few frustrated attempts coding something by my self I start looking for some sort of custom easing functions, how they works, etc. This is how I got to this <a href="http://burakkanber.com/" target="_blank">blog about Physics and JavaScript</a>, specifically <a href="http://burakkanber.com/blog/physics-in-javascript-car-suspension-part-1-spring-mass-damper/" target="_blank">to this article about car suspension</a> (Hooke’s Law). And I thought it may works great on scrolling.</p>

<p>After trying several times to use this on scrolling I finally made my first successful attempt, and it was pretty much what I had in mind: <a href="http://code.juan.me/demos/springy/basic/html/" target="_blank">http://code.juan.me/demos/springy/basic/html/</a>. In the demo you can see on the left, the green squares are being eased with the spring effect, the one on the right has no easing (so you can see the difference).</p>

<p>Looking at the first attempt (and being an Android user) I realized there was something familiar with it, it took me a while to realize that it was exactly what the Messages App of iOS 7 does, so of course I couldnt resist to do this: <a href="http://code.juan.me/demos/springy/messages/html/" target="_blank">http://code.juan.me/demos/springy/messages/html/</a>. And now we can say that Apple is using car suspension physics in some of their Apps (?).</p>

<p>I also wanted to try this in a sort of more real use case, so I made two more demos using a grid prototype, this one with images: <a href="http://code.juan.me/demos/springy/grid-prototype/html/" target="_blank">http://code.juan.me/demos/springy/grid-prototype/html/</a> and this one more clean in white: <a href="http://code.juan.me/demos/springy/grid-prototype-2/html/" target="_blank">http://code.juan.me/demos/springy/grid-prototype-2/html/</a></p>

<p><strong>The Code</strong></p>

<p>Note: Ill only go through the parts of code related to the spring effect of the first demo, if you want to see more how the demo was made feel free to take a look at the full code.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">options</span>  <span class="o">=</span> <span class="p">{</span>
    <span class="na">stiffness</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>
    <span class="na">friction</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span>
    <span class="na">threshold</span><span class="p">:</span> <span class="mf">0.03</span>
<span class="p">},</span> 
<span class="nx">inMotion</span> <span class="o">=</span> <span class="nb">Array</span><span class="p">(</span><span class="kc">false</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="kc">false</span><span class="p">)</span></code></pre></figure>

<p>First at all we define the spring properties, the params stiffness  and friction talk by them self. The threshold option is basically how long you want to keep the spring working, so like if acceleration is equal or less than 0.03 it will stop. The inMotion array specifies which of the squares are currently in motion.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">core</span><span class="p">.</span><span class="nx">onScrolling</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">lastScrollY</span> <span class="o">=</span> <span class="nx">scrollY</span><span class="p">;</span>
    <span class="nx">scrollY</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">scrollY</span><span class="p">;</span>

    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">=</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="nx">inMotion</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">animating</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">animating</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
        <span class="nx">requestAnimFrame</span><span class="p">(</span><span class="nx">core</span><span class="p">.</span><span class="nx">stepScrolling</span><span class="p">);</span>           
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>When the scrolling starts we set the flag of motion for each square in true and we also call core.stepScrolling using requestAnimFrame.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">core</span><span class="p">.</span><span class="nx">stepScrolling</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">$</span><span class="p">.</span><span class="nx">each</span><span class="p">(</span><span class="nx">$boxItems</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">v</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">$thisItem</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">v</span><span class="p">);</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">inMotion</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">scrollY</span> <span class="o">-</span> <span class="nx">lastScrollY</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">acceleration</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">stiffness</span> <span class="o">+</span> <span class="p">(</span><span class="nx">i</span> <span class="o">*</span> <span class="mi">5</span><span class="p">))</span> <span class="o">*</span> <span class="p">((</span><span class="nx">scrollY</span> <span class="o">+</span> <span class="mi">50</span><span class="p">)</span>  <span class="o">+</span> <span class="p">(</span><span class="nx">i</span> <span class="o">*</span> <span class="mi">40</span><span class="p">)</span> <span class="o">-</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">$thisItem</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s2">"top"</span><span class="p">)))</span> <span class="o">-</span> <span class="nx">options</span><span class="p">.</span><span class="nx">friction</span> <span class="o">*</span> <span class="nx">velocity</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nx">acceleration</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">stiffness</span> <span class="o">-</span> <span class="p">(</span><span class="nx">i</span> <span class="o">*</span> <span class="mi">5</span><span class="p">))</span> <span class="o">*</span> <span class="p">((</span><span class="nx">scrollY</span> <span class="o">+</span> <span class="mi">50</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="nx">i</span> <span class="o">*</span> <span class="mi">40</span><span class="p">)</span> <span class="o">-</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">$thisItem</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s2">"top"</span><span class="p">)))</span> <span class="o">-</span> <span class="nx">options</span><span class="p">.</span><span class="nx">friction</span> <span class="o">*</span> <span class="nx">velocity</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
            <span class="p">}</span>
            <span class="nx">velocity</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+=</span> <span class="nx">acceleration</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">*</span> <span class="nx">frameRate</span><span class="p">;</span>
            <span class="nx">newTop</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+=</span> <span class="nx">velocity</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">*</span> <span class="nx">frameRate</span><span class="p">;</span>
            <span class="nx">inMotion</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">acceleration</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">threshold</span> <span class="o">||</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">velocity</span><span class="p">[</span><span class="nx">i</span><span class="p">])</span> <span class="o">&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="o">=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">threshold</span><span class="p">;</span>

            <span class="nx">$thisItem</span><span class="p">.</span><span class="nx">css</span><span class="p">({</span><span class="na">top</span><span class="p">:</span> <span class="nx">newTop</span><span class="p">[</span><span class="nx">i</span><span class="p">]});</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">core</span><span class="p">.</span><span class="nx">completeScrolling</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">});</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">animating</span><span class="p">)</span> <span class="nx">requestAnimFrame</span><span class="p">(</span><span class="nx">core</span><span class="p">.</span><span class="nx">stepScrolling</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>Here we go through all the square elements, if it is still in motion we calculate and set the acceleration, velocity and new position for it. When the squares are not in motion we call <code class="highlighter-rouge">core.completeScrolling</code>.</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">core</span><span class="p">.</span><span class="nx">completeScrolling</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span><span class="o">=</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">acceleration</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="nx">velocity</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="nx">inMotion</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">animating</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
    <span class="nx">cancelAnimationFrame</span><span class="p">(</span><span class="nx">core</span><span class="p">.</span><span class="nx">stepScrolling</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>And finally, on <code class="highlighter-rouge">completeScrolling</code> we reset all our variables and stop the Request Animation Frame that was calling core.stepScrolling.</p>

<p><strong>Update — Jan 27, 2014.</strong></p>

<p>I put these demos in a <a href="https://github.com/juancabrera/demos" target="_blank">GitHub repo</a> because some people wanted to contribute with a few improvements in performance :)</p>

<p><a href="https://github.com/juancabrera/demos" target="_blank">https://github.com/juancabrera/demos</a></p>

                    ]]>
                </content:encoded>
                <guid isPermaLink="false">/javascript/motion/animation/2014/01/20/the-spring-effect-in-javascript/</guid>
                <description>
                    
                </description>
                <pubDate>Mon, 20 Jan 2014 00:00:00 -0500</pubDate>
                <author>Juan Cabrera</author>
            </item>
        
    
  </channel>
</rss>
